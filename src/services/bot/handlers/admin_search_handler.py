import datetime

from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.services.bot.fsm.user_states import InputNumberState
from src.services.bot.keyboards.inline.code_keyboard import get_code_kb
from src.services.database.orm.crud_users import (
    change_nickname,
    change_pause as change_pause_db,
    change_comment as change_comment_db,
    change_password as change_password_db,
    change_login as change_login_db,
)
from src.services.database.orm.users import get_user_admin

from src.services.bot.filters.chat_type import ChatTypeFilter, IsAdmin
from logger.logger import setup_logger


admin_search = Router(name='admin_search')
admin_search.message.filter(ChatTypeFilter(["private"]), IsAdmin())

logger = setup_logger(__name__)


@admin_search.message(F.text == '–ù–∞–π—Ç–∏ –≤ –±–∞–∑–µ(–∞–¥–º–∏–Ω)')
async def search_user(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ"""

    logger.info(fr'–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ - @{message.from_user.username}, ID: {message.from_user.id}')
    await state.set_state(InputNumberState.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@admin_search.message(F.text, StateFilter(InputNumberState.number))
async def search(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    cross_number = data['number']

    info = await get_user_admin(find_str=str(cross_number).upper())

    if info.get('error'):
        logger.critical(
            f"ID-{message.from_user.id}, @{message.from_user.username}---{info.get('error')}, {info.get('text')}")
        await message.answer(f"{info.get('error')}. {info.get('text')}")
    else:
        await message.answer(
            f'üë±{info.get("user_id")}\nü§ñ–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {info.get("serial_number")}\nüìÖ–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {info.get("pay_date")}\nü§ñ–°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã: {"–ù–∞ –ø–∞—É–∑–µ" if info.get("stay_on_pause") is True else "–ê–∫—Ç–∏–≤–µ–Ω"}\nü§ñ–Æ–∑–µ—Ä–Ω–µ–π–º: {info.get("username")}\n‚úâÔ∏è–õ–æ–≥–∏–Ω: {info.get("email")}\nü§ñ–ü–∞—Ä–æ–ª—å: {info.get("password")}\nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info.get("phone")}\n\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {info.get("comment", "–ù–µ —É–∫–∞–∑–∞–Ω")}',
            reply_markup=get_code_kb(cross_number=cross_number))
        await state.clear()


class ChangeState(StatesGroup):
    new_value = State()


@admin_search.callback_query(F.data.startswith("settings_"))
async def settings(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]

    await callback.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(text="üìÖ–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã",
                                                                callback_data=f"invoice_{serial_number}")],
                                          [InlineKeyboardButton(text="ü§ñ–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã",
                                                                callback_data=f"pause_{serial_number}")],
                                          [InlineKeyboardButton(text="ü§ñ–ò–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º",
                                                                callback_data=f"username_{serial_number}")],
                                          [InlineKeyboardButton(text="‚úâÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω",
                                                                callback_data=f"login_{serial_number}")],
                                          [InlineKeyboardButton(text="ü§ñ–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å",
                                                                callback_data=f"password_{serial_number}")],
                                          [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π",
                                                                callback_data=f"comment_{serial_number}")],

                                      ]
                                  ))


@admin_search.callback_query(F.data.startswith("invoice_"))
async def change_invoice(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {serial_number}:")
    await state.set_state(ChangeState.new_value)
    await state.update_data(serial_number=serial_number, field="invoice")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã"
@admin_search.callback_query(F.data.startswith("pause_"))
async def change_pause(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã —É {serial_number}")
    await change_pause_db(serial_number=serial_number)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º"
@admin_search.callback_query(F.data.startswith("username_"))
async def change_username(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {serial_number}:")
    await state.set_state(ChangeState.new_value)
    await state.update_data(serial_number=serial_number, field="username")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω"
@admin_search.callback_query(F.data.startswith("login_"))
async def change_login(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {serial_number}:")
    await state.set_state(ChangeState.new_value)
    await state.update_data(serial_number=serial_number, field="login")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å"
@admin_search.callback_query(F.data.startswith("password_"))
async def change_password(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {serial_number}:")
    await state.set_state(ChangeState.new_value)
    await state.update_data(serial_number=serial_number, field="password")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π"
@admin_search.callback_query(F.data.startswith("comment_"))
async def change_comment(callback: types.CallbackQuery, state: FSMContext):
    serial_number = callback.data.split("_")[-1]
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {serial_number}:")
    await state.set_state(ChangeState.new_value)
    await state.update_data(serial_number=serial_number, field="comment")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@admin_search.message(F.text, StateFilter(ChangeState.new_value))
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    serial_number = data.get("serial_number")
    field = data.get("field")
    new_value = message.text
    if field == "comment":
        await change_comment_db(serial_number=serial_number, new_comment=new_value)
    if field == "password":
        await change_password_db(serial_number=serial_number, new_password=new_value)
    if field == "login":
        await change_login_db(serial_number=serial_number, new_email=new_value)
    if field == "invoice":
        if new_value.isdigit():
            if int(new_value) > 31:
                await message.answer("–ù–µ —Ç–∞–∫–æ–µ –±–æ–ª—å—à–æ–µ")
                return
            today = datetime.datetime.today()
            invoice_day = datetime.datetime(
                year=today.year,
                month=today.month,
                day=int(new_value))
            if invoice_day < today:
                if today.month == 12:
                    invoice_day = datetime.datetime(
                        year=today.year + 1,
                        month=1,
                        day=int(new_value)
                    )
                else:
                    invoice_day = datetime.datetime(
                        year=today.year,
                        month=today.month + 1,
                        day=int(new_value)
                    )
            invoice_day.strftime("%Y-%m-%d")
        else:
            await message.answer("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    if field == "username":
        await change_nickname(serial_number=serial_number, new_nickname=new_value)

    await state.clear()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
