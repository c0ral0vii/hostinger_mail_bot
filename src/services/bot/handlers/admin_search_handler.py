from aiogram import Router, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from src.services.bot.fsm.user_states import InputNumberState
from src.services.bot.keyboards.inline.code_keyboard import get_code_kb
from src.services.database.orm.users import get_user_admin

from src.services.bot.filters.chat_type import ChatTypeFilter, IsAdmin
from logger.logger import setup_logger

admin_search = Router(name='admin_search')
admin_search.message.filter(ChatTypeFilter(["private"]), IsAdmin())

logger = setup_logger(__name__)


@admin_search.message(F.text == '–ù–∞–π—Ç–∏ –≤ –±–∞–∑–µ(–∞–¥–º–∏–Ω)')
async def search_user(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ"""

    logger.info(fr'–ù–∞—á–∞–ª –ø–æ–∏—Å–∫ - @{message.from_user.username}, ID: {message.from_user.id}')
    await state.set_state(InputNumberState.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@admin_search.message(F.text, StateFilter(InputNumberState.number))
async def search(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    cross_number = data['number']

    info = await get_user_admin(find_str=str(cross_number).upper())

    if info.get('error'):
        logger.critical(
            f"ID-{message.from_user.id}, @{message.from_user.username}---{info.get('error')}, {info.get('text')}")
        await message.answer(f"{info.get('error')}. {info.get('text')}")
    else:
        await message.answer(
            f'üë±{info.get("user_id")}\nü§ñ–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {info.get("serial_number")}\nüìÖ–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {info.get("need_pay_date")}\nü§ñ–°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã: {"–ù–∞ –ø–∞—É–∑–µ" if info.get("stay_on_pause") else "–ê–∫—Ç–∏–≤–µ–Ω"}\nü§ñ–Æ–∑–µ—Ä–Ω–µ–π–º: {info.get("username")}\n‚úâÔ∏è–õ–æ–≥–∏–Ω: {info.get("email")}\nü§ñ–ü–∞—Ä–æ–ª—å: {info.get("password")}\nüìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {info.get("phone")}\n\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {info.get("comment", "–ù–µ —É–∫–∞–∑–∞–Ω")}',
            reply_markup=get_code_kb(cross_number=cross_number))
        await state.clear()